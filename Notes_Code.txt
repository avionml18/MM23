Avion Lowery
10/27/23
**************** CODE ****************
size = 4


def make_map():
    max_dist = size - 1
    half_dist = (max_dist - 1) // 2
    half_dist_ct = half_dist
    curr_dist = max_dist - 1
    map = [[0] * size for i in range(size)]

    # Logic that populates the distance numbers to the maze
    for i in range(size):
        if i != 0:  # Not first iteration
            if i < half_dist + 1:
                if curr_dist != half_dist_ct:
                    curr_dist -= 1
                    half_dist_ct -= 1
            else:
                if curr_dist != half_dist:
                    curr_dist += 1
                    half_dist_ct += 1

        print()
        for j in range(size):
            map[i][j] = curr_dist
            if j < half_dist + 1:
                if curr_dist != half_dist_ct:
                    curr_dist -= 1
            else:
                if j != max_dist:
                    curr_dist += 1

            print(map[i][j], end=' ')


if __name__ == '__main__':
    make_map()

**************** OUTPUT **************
2 1 1 2
1 0 0 1
1 0 0 1
1 0 0 1



11/1/23
**************** CODE ****************
    def make_out_walls(self):
        """
        This will edit the maze's map to have squares that will have outside walls in its values

        :return: None
        """

        max_dist_index = DEFAULT_SIZE - 1

        # Condition for the outside walls
        num_squares = 0

        # Iteration happens by going in a clockwise direction but to do this you need to
        #   adjust the iterators for rows and columns as you go through it
        min_iterator_i = -1
        i = 0
        max_iterator_i = DEFAULT_SIZE
        flag_i = True

        min_iterator_j = -1
        j = 0
        max_iterator_j = 1
        flag_j = True

        # This flag is needed to skip over the first iteration so that it
        #   sets j = 0 when necessary.
        flag_j_zero = True

        # Skip over code if you're ready to exit
        flag_exit = False

        while num_squares < DEFAULT_SIZE ** 2 - (DEFAULT_SIZE - 2) ** 2:

            while min_iterator_i < i < max_iterator_i:
                if flag_j_zero:
                    j = 0
                elif j > max_dist_index:
                    j = max_dist_index
                while min_iterator_j < j < max_iterator_j:

                    north, south, west, east = False, False, False, False

                    # Top Left corner -> (0, 0)
                    if num_squares == 0:
                        north = True
                        west = True

                    # j will not change when going down the left outer wall
                    elif (max_dist_index * 0) < num_squares < (max_dist_index * 1):
                        west = True

                    # Bottom Left corner -> (5, 0)
                    elif num_squares == (max_dist_index * 1):
                        west = True
                        south = True
                        # update iterators
                        max_iterator_j = DEFAULT_SIZE
                        flag_j_zero = False

                    # The squares between Bottom Left corner -> Bottom Right corner
                    elif (max_dist_index * 1) < num_squares < (max_dist_index * 2):
                        south = True

                    # Bottom Right corner -> (5, 5)
                    elif num_squares == (max_dist_index * 2):
                        south = True
                        east = True
                        # update iterators
                        flag_i = not flag_i

                    # The squares between Bottom Right corner -> Top Right corner
                    elif (max_dist_index * 2) < num_squares < (max_dist_index * 3):
                        east = True

                    # Top Right corner -> (0, 5)
                    elif num_squares == (max_dist_index * 3):
                        east = True
                        north = True
                        # update iterators
                        flag_j = not flag_j

                    # The squares between Top Right corner -> Top Left corner
                    elif (max_dist_index * 3) < num_squares < (max_dist_index * 4):
                        north = True

                    else:
                        flag_exit = True

                    if not flag_exit:
                        dir_tuple = north, south, west, east
                        square_obj = self.map[i][j]
                        square_obj.set_walls(dir_tuple)
                        # self.check_set_walls(square_obj.get_walls(), (i, j))
                        num_squares += 1

                    if flag_j:
                        j += 1
                    else:
                        j -= 1

                if flag_i:
                    i += 1
                else:
                    i -= 1

**************** EXPLANATION ****************
This can be converted to a randomize maze algorthm